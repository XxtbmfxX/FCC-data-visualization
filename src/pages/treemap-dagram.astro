---
import Layout from '../layouts/Layout.astro';
import Title from '../components/Title.astro';
import TreeMap from '../components/TreeMap.astro';

---

<Layout title="Data Visualization projects">
  <Title title="Ola treemap Dagram" />
	<TreeMap/>

</Layout>

<script>
 import * as d3 from "d3";


  // Datos ficticios para el Treemap
  const data = {
    name: "Root",
    children: [
      { name: "Category1", value: 20 },
      { name: "Category2", value: 30 },
      { name: "Category3", value: 15 },
      // Agrega más categorías según tus necesidades
    ]
  };

  // Crear el contenedor SVG
  const svg = d3.select("#container").append("svg")
    .attr("width", 400)
    .attr("height", 200);

  // Crear la jerarquía de datos
  const root = d3.hierarchy(data)
    .sum(d => d.value);

  // Crear el Treemap layout
  const treemap = d3.treemap()
    .size([400, 200]);

  // Aplicar el layout al nodo raíz
  treemap(root);

  // Agregar rectángulos para cada nodo
  svg.selectAll("rect")
    .data(root.leaves())
    .enter().append("rect")
      .attr("x", d => d.x0)
      .attr("y", d => d.y0)
      .attr("width", d => d.x1 - d.x0)
      .attr("height", d => d.y1 - d.y0)
      .on("mouseover", (event, d) => {
        // Mostrar información adicional en el mouseover
        console.log(`Category: ${d.data.name}, Value: ${d.data.value}`);
      });

  // Agregar etiquetas de texto
  svg.selectAll("text")
    .data(root.leaves())
    .enter().append("text")
      .attr("x", d => d.x0 + 5)
      .attr("y", d => d.y0 + 15)
      .text(d => d.data.name);



</script>

<style is:inline>
  /* Estilos para el Treemap */
  rect {
    fill: steelblue;
    stroke: #fff;
  }
  text {
    font-size: 10px;
    fill: #fff;
  }
</style>